<program> -> function id() <block> end
<statement> -> <if_statement> | <assignment_statement> | <while_statement> | <print_statement> | <for_statement>
<assignment_statement> -> id <assignment_operator> <arithmetic_expression>
<arithmetic_expression> -> <id> | <literal_integer> | <binary_expression>
x -> id
= -> <Assignment_Operator>
7 -> <Integer_Literal>
<statement> -> <if_statement> | <assignment_statement> | <while_statement> | <print_statement> | <for_statement>
<if_statement> -> if <boolean_expression> <block> else <block> end
<boolean_expression> -> <relative_op> <arithmetic_expression> <arithmetic_expression>
<relative_op> -> le_operator | lt_operator | ge_operator | gt_operator | eq_operator | ne_operator
<arithmetic_expression> -> <id> | <literal_integer> | <binary_expression>
<arithmetic_expression> -> <id> | <literal_integer> | <binary_expression>
< -> <LT_Operator>
x -> id
4 -> <Integer_Literal>
<statement> -> <if_statement> | <assignment_statement> | <while_statement> | <print_statement> | <for_statement>
<print_statement> -> print ( <arithmetic_expression> )
<arithmetic_expression> -> <id> | <literal_integer> | <binary_expression>
x -> id
<statement> -> <if_statement> | <assignment_statement> | <while_statement> | <print_statement> | <for_statement>
<print_statement> -> print ( <arithmetic_expression> )
<arithmetic_expression> -> <id> | <literal_integer> | <binary_expression>
<binary_expression> -> <arithmetic_op> <arithmetic_expression> <arithmetic_expression>
<arithmetic_op> -> add_operator | sub_operator | mul_operator | div_operator | mod_operator | exp_operator | rev_div_operator
<arithmetic_expression> -> <id> | <literal_integer> | <binary_expression>
<arithmetic_expression> -> <id> | <literal_integer> | <binary_expression>
* -> <Multiplication_Operator>
x -> id
2 -> <Integer_Literal>
<statement> -> <if_statement> | <assignment_statement> | <while_statement> | <print_statement> | <for_statement>
<if_statement> -> if <boolean_expression> <block> else <block> end
<boolean_expression> -> <relative_op> <arithmetic_expression> <arithmetic_expression>
<relative_op> -> le_operator | lt_operator | ge_operator | gt_operator | eq_operator | ne_operator
<arithmetic_expression> -> <id> | <literal_integer> | <binary_expression>
<arithmetic_expression> -> <id> | <literal_integer> | <binary_expression>
> -> <GT_Operator>
x -> id
3 -> <Integer_Literal>
